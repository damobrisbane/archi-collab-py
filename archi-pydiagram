#!/usr/bin/python

import re,uuid,os,sys,shutil,argparse
from lxml import etree
from pymongo import MongoClient
import tempfile
import logging

class Mongo:
    def __init__(self, host, db, cltn=None):
        self.host = host
        client = MongoClient(host=host,serverSelectionTimeoutMS=500)
        self.client = MongoClient(host=host,serverSelectionTimeoutMS=500)
        self.db_conn = self.client.get_database(db)
        if not cltn is None:
          self.cltn = self.db_conn.get_collection(cltn)

    def close(self):
        self.client.close()

def uuid_id():
  _uuid = re.sub('-','',str(uuid.uuid1()))
  _id = 'id-%s'%_uuid
  return _uuid, _id

class ArchiItem():
  def __init__(self,dp_fi,el):
    self.dp_fi = dp_fi
    self.el = el

  def dp(self):
    return self.dp_fi

  def tag(self):
    try:
      return etree.QName(self.el).localname
    except:
      return None
    
  def get_attr(self,i):
    try:
      return self.el.get(i)
    except:
      return None

class ArchiFldr(ArchiItem):
  """
  ('diagrams/folder.xml', 'Folder', 'id-00cea5fe6fb045c4abb2475473954e7d')
  """
  def __init__(self,dp_fi,el):
    ArchiItem.__init__(self,dp_fi,el)
 
class ArchiDiagram(ArchiItem):
  """
  ('id-09f10896f90111ec9117665ec999a661/ArchimateDiagramModel_id-09f1729af90111ec9117665ec999a661.xml',
 'ArchimateDiagramModel',
 'id-09f1729af90111ec9117665ec999a661')
  """
  def __init__(self,dp_fi,el):
    ArchiItem.__init__(self,dp_fi,el)
    
def get_archi_type(dp_fi_id,dp_fi):
  r0 = etree.parse(etree.open(dp_fi)).getroot()
  _type = etree.QName(r0).localname
  d = {
    'Folder': ArchiFldr(dp_fi_id,r0),
    'ArchimateDiagramModel': ArchiDiagram(dp_fi_id,r0)
  }
  return d.get(_type,ArchiItem(dp_fi_id,None))

def get_cltn_json_mongo_d(m,cltn_match='.*',attribute_name='_id'):
  try:
    for cltn_name in m.db_conn.list_collection_names():
      if re.match(cltn_match,cltn_name):
        cltn = m.db_conn.get_collection(cltn_name)
        modex = re.sub('\.',':',cltn_name)
        d1 = dict()
        for doc in list(cltn.find({})):
          d1.setdefault(doc[attribute_name],doc)
        yield (modex, d1)
  except Exception as e:
    logger.error('!!! ERROR !!!! %s'%(e,))

archi_fi_base = lambda x: re.match('.*/(.*/.*$)',x).groups()[0]

def repo_items_d(dp0):
  obj_tmp = tempfile.TemporaryDirectory()
  d_item = dict()
  for dp,l_di,l_fi in os.walk(dp0):
    for fi in l_fi:
      if not dp == dp0: # not the root "Views" folder.xml
        dp_fi = os.path.join(dp,fi)
        dp_fi_id = archi_fi_base(dp_fi)
        d_item.setdefault(dp_fi_id,get_archi_type(dp_fi_id,dp_fi))
  return d_item

def archi_xml(el_type,el_name,ns="http://www.archimatetool.com/archimate"):
  _uuid, _id = uuid_id()
  _xml=(etree.Element('{%s}%s'%(ns,el_type), nsmap={"archimate": ns}, name=el_name, id="%s"%_id))
  return _id, _xml

def write_xml(dp_fn,el_xml):
  try:
    os.makedirs(os.path.dirname(dp_fn))
  except: pass
  open(dp_fn,'w').write(etree.tostring(el_xml).decode())
 
def import_diagrams(args1,mongo):

  dp_repo = args1.dp_repo
  dp_repo_base = os.path.basename(dp_repo)
  cltn_match = args1.cltn_match
  match = args1.match

  dp_tmp = tempfile.TemporaryDirectory().name

  logger.warning('<<<<<  (%s)      >>>>'%(cltn_match))
  s_ctx1, s_ctx2 = set(), set()

  d_ctx = dict()
  for cltn_name,d_mode_json in get_cltn_json_mongo_d(mongo, cltn_match):
    d_ctx.setdefault(cltn_name,list())
    for ctx_name in d_mode_json:
      if ((match=='.*') or (match in ctx_name)):
        d_ctx[cltn_name].append(ctx_name)

  d_item = repo_items_d(dp_repo)

  d_fldr_item = dict()
  [d_fldr_item.setdefault(i,d_item[i]) for i in d_item if d_item[i].tag() == 'Folder']

  d_diagram_item = dict()
  [d_diagram_item.setdefault(i,d_item[i]) for i in d_item if d_item[i].tag() == 'ArchimateDiagramModel']

  s_fldr_item1 = set([i.get_attr('name') for i in d_fldr_item.values()])

  for cltn_name in d_ctx:
    if not cltn_name in s_fldr_item1:
      logger.info('Create (Folder) %s'%cltn_name)
      el_id, el = archi_xml('Folder',cltn_name)
      dp_fi = os.path.join(dp_tmp,dp_repo_base,el_id,'folder.xml')
      write_xml(dp_fi, el)
      dp_fi_id = archi_fi_base(dp_fi)
      d_fldr_item.setdefault(dp_fi_id, get_archi_type(dp_fi_id,dp_fi))

  s_diagram_item1 = set([i.get_attr('name') for i in d_diagram_item.values()])

  for cltn_name in d_ctx:
    for ctx_name in d_ctx[cltn_name]:
      if ctx_name in s_diagram_item1:
        logger.info('Skip (ArchimateDiagramModel) %s.%s'%(cltn_name,ctx_name))
      else:
        logger.info('Create (ArchimateDiagramModel) %s.%s'%(cltn_name,ctx_name))
        xx = [d for d in d_fldr_item.values() if d.get_attr('name') == cltn_name][0]
        el_xml_id, el_xml = archi_xml('ArchimateDiagramModel',ctx_name)
        dp_fn = os.path.join(dp_tmp,dp_repo_base,xx.get_attr('id'), 'ArchimateDiagramModel_%s.xml'%el_xml_id)
        write_xml(dp_fn, el_xml)

  try:
    shutil.copytree(dp_tmp,'%s/..'%dp_repo,dirs_exist_ok=True)
  except: pass
      
if __name__ == '__main__':

  parser = argparse.ArgumentParser(prog='PROG')
  subparsers = parser.add_subparsers(help='sub-command help')

  parser_a1 = subparsers.add_parser('import-diagrams', help='relations help')
  parser_a1.set_defaults(func=import_diagrams)
  parser_a1.add_argument('mongo_url', type=str, help='URL for mongodb connection')
  parser_a1.add_argument('dp_repo', type=str, help='Root path to local clone of model-repository')
  parser_a1.add_argument('cltn_match', type=str, help='Mongodb collection to create views from')
  parser_a1.add_argument('-m', '--match', type=str, required=False, default='.*', help='Optional document *name* match')
  parser_a1.add_argument('-a', '--attribute', type=str, required=False, default='_id', help='Optional document attribute to get diagram id from')
  parser_a1.add_argument('-l', '--log-level', default='INFO', help='set log level')

  args = parser.parse_args()

  logger = logging.getLogger('logger')
  logger.setLevel(args.log_level)
  consoleHandler = logging.StreamHandler()
  logger.addHandler(consoleHandler)

  mongo = Mongo(args.mongo_url,db='ctx')

  args.func(args,mongo)

  mongo.close()

